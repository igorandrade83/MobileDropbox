{
  "textToTextBinary": "Text for binary text",
  "functionToConvertTextInTextBinary": "Function to convert text to binary text",
  "contentInAscii": "Ascii content",
  "toLogic": "For logic",
  "functionConvertToLogic": "Function to convert to logical",
  "convertToBytes": "bytes to text",
  "functionToConvertTextBinaryToText": "Function to convert binary text to text",
  "contentInTextBinary": "Binary text content",
  "convertToAscii": "Convert char to ASCII code",
  "functionToConvertToAscii": "Function to convert char to ASCII code",
  "content": "Content",
  "convertStringToJs": "Text to javascript text",
  "functionToConvertStringToJs": "Function to convert text to javascript escaping text",
  "convertStringToDate": "Convert text to data",
  "functionToConvertStringToDate": "Function to convert text to data",
  "minSize": "Minimum size",
  "convertIntToHex": "Convert to hexadecimal",
  "functionToConvertIntToHex": "Function to convert integer to hexadecimal",
  "convertToLong": "Convert to long",
  "functionToConvertToLong": "Function to convert to long",
  "convertToString": "Convert to text",
  "functionToConvertToString": "Function to convert to text",
  "getMinuteFromDate": "Get date minute",
  "functionToGetMinuteFromDate": "Function to get minute of date",
  "date": "Date",
  "getSecondFromDate": "Get date second",
  "functionToGetSecondFromDate": "Function to get date second",
  "getHourFromDate": "Get date time",
  "functionToGetHourFromDate": "Function to get date time",
  "getYearFromDate": "Get year of date",
  "functionToGetYearFromDate": "Function to get year of date",
  "getMonthFromDate": "Get month of date",
  "functionToGetMonthFromDate": "Function to get date month",
  "getDayFromDate": "Get date day",
  "functionToGetDayFromDate": "Function to get date day",
  "getMonthsBetweenDates": "Get total of months between dates",
  "functionToGetMonthsBetweenDates": "Function to get total of months between dates",
  "largerDateToBeSubtracted": "Larger date to be subtracted",
  "smallerDateToBeSubtracted": "Minor date to be subtracted",
  "getYearsBetweenDates": "Get total of years between dates",
  "functionToGetYearsBetweenDates": "Function to get total of years between dates",
  "incDay": "Increment day on date",
  "functionToIncDay": "Function to increment day in date",
  "daysToIncrement": "Days to increase",
  "incMonth": "Increase month on date",
  "functionToIncMonth": "Function to increment month in date",
  "monthsToIncrement": "Months to increase",
  "incYear": "Increase year by date",
  "functionToIncYear": "Function to increment year in date",
  "yearsToIncrement": "Years to increase",
  "getNow": "Get current date and time",
  "functionToGetNow": "Function to get current date and time",
  "getDaysBetweenDates": "Get days total between dates",
  "functionToGetDaysBetweenDates": "Function to get days total between dates",
  "formatDateTime": "Format date",
  "functionToFormatDateTime": "Function to format date",
  "getValueIsNotNumber": "Get value that is not number",
  "functionToGetValueIsNotNumber": "Function to get value that is not number",
  "format": "Format",
  "newDate": "New date",
  "functionToNewDate": "Function to create new date",
  "month": "Month",
  "year": "Year",
  "day": "Day",
  "hour": "Hour",
  "minute": "Minute",
  "second": "Second",
  "callServerBlocklyAsync": "Call blockly server async",
  "functionToCallServerBlocklyAsync": "function to block server call async",
  "classNameWithMethod": "Blockly name",
  "callbackSuccess": "Callback success: callback function when success",
  "callbackError": "Callback error: callback function when error occurs",
  "params": "Parameters",
  "callServerBlockly": "Call blockly",
  "functionToCallServerBlockly": "function to block server call",
  "makeCallServerBlocklyAsync": "call blockly asynchronous server - callback with blockly",
  "functionToMakeCallServerBlocklyAsync": "Function to call blockly from the asynchronous server and with possibility to set the callbacks as string (blockly complete name)",
  "blocklyWithFunction": "Blockly name",
  "callbackBlocklySuccess": "Callback success: blockly (full) name to be called when to get the server response successfully",
  "callbackBlocklyError": "Callback error: blockly (full) name to be called when retrieving server response with error",
  "changeValueOfField": "Change field value",
  "functionToChangeValueOfField": "Function to change field value",
  "field": "Field",
  "Value": "Value",
  "CategoryType.CONVERSION": "Conversion",
  "CategoryType.UTIL": "Util",
  "CategoryType.SCREEN": "Form",
  "CategoryType.DATETIME": "Date and time",
  "CategoryType.XML": "Xml",
  "getValueOfField": "Get value of field",
  "functionToGetValueOfField": "Function to get value of field",
  "fieldNameFromScreen": "Get field name",
  "functionToGetFieldNameFromScreen": "Function to get field name (You need to associate the blockly with the form)",
  "throwExceptionName": "Throw Exception",
  "throwExceptionDescription": "Function that throw a exception with a message",
  "throwExceptionParam0": "Message",
  "createExceptionName": "Create exception",
  "createExceptionDescription": "Function that create a exception",
  "createExceptionParam0": "Message",
  "createScopeVariableName": "Create scope variable",
  "createScopeVariableDescription": "Function that create a scope variable",
  "createScopeVariableParam0": "Name",
  "createScopeVariableParam1": "Value",
  "startInsertingModeName": "Start the insert mode",
  "startInsertingModeDescription": "Function that receive a datasource and start the insertion mode",
  "startInsertingModeParam0": "Datasource",
  "datasourceFromScreenName": "Get Datasource",
  "datasourceFromScreenDescription": "Function that return the datasource name from target",
  "datasourceFromScreenParam0": "Datasource name",
  "startEditingModeName": "Start edition mode",
  "startEditingModeDescription": "Function that receive a datasource and start the edition mode",
  "startEditingModeParam0": "Datasource",
  "previusRecordName": "Turn back record",
  "previusRecordDescription": "Function that turn back the datasource cursor",
  "previusRecordParam0": "Datasource",
  "nextRecordName": "Go forward record",
  "nextRecordDescription": "Function that go forward datasource cursor",
  "nextRecordParam0": "Datasource",
  "removeRecordName": "Remove record",
  "removeRecordDescription": "Function that start the datasource remove mode",
  "removeRecordParam0": "Datasource",
  "hasNextRecordName": "Exists next record?",
  "hasNextRecordDescription": "Function that return if exists a next record",
  "hasNextRecordParam0": "Datasource",
  "quantityRecordsName": "Quantity of records",
  "quantityRecordsDescription": "Function that returns the quantity of all records on datasource",
  "quantityRecordsParam0": "Datasource",
  "datasourcePostName": "Post",
  "datasourcePostDescription": "Function that call the post() method of datasource",
  "datasourcePostParam0": "Datasouce",
  "datasourceFilterName": "Filter",
  "datasourceFilterDescription": "Function that filter a datasource concat '/' and the path on parameter",
  "datasourceFilterParam0": "Datasource",
  "datasourceFilterParam1": "Caminho",
  "getParam": "Get param from query string",
  "functionToGetParam": "Function to get param from query string",
  "paramName": "Param name",
  "changeView": "Change view",
  "functionToChangeView": "Function to change the current view",
  "view": "Destination view",
  "openUrl": "Open url",
  "functionToOpenUrl": "Function to open url",
  "url": "Destination url",
  "newTab": "New tab?",
  "width": "Width",
  "height": "Height",
  "screenNotifyName": "Show notification",
  "screenNotifyDescription": "Function that show a notification",
  "screenNotifyParam0": "Notification type: Can receive values success, error, warning, info or primary",
  "screenNotifyParam1": "Message",
  "getScopeVariableName": "Get scope variable",
  "getScopeVariableDescription": "Function that get the scope variable value",
  "getScopeVariableParam0": "Variable name",
  "ObjectType.DATETIME": "Date",
  "confirmDialogName": "Confirm action",
  "confirmDialogDescription": "Function that shows a confirm action and return true of false",
  "confirmDialogParam0": "Message",
  "createDefaultModalDescription": "Function that create a modal",
  "createDefaultModalName": "Create Modal",
  "createDefaultModalParam1": "Title: Modal title",
  "createDefaultModalParam2": "Message: Message shown on modal",
  "createDefaultModalParam3": "Cancel button name",
  "createDefaultModalParam4": "Confirm button name",
  "createDefaultModalParam5": "On Success: Statements to be executed when a confirm button is clicked on modal",
  "createDefaultModalParam6": "On Cancel: Statements to be executed when a cancel button is clicked on modal",
  "node": "Node",
  "childName": "Child name",
  "element": "Element",
  "attribute": "Attribute",
  "LogicIsNullParam": "Variable: Variable to be checked",
  "LogicIsNullName": "is null?",
  "LogicIsNullDescription": "Function that check if a variable is null",
  "LogicIsNullOrEmptyName": "is null or empty?",
  "LogicIsNullOrEmptyDescription": "Function that check if a variable is null or empty",
  "LogicIsEmptyName": "is empty?",
  "LogicIsEmptyDescription": "Function that check if a variable is empty",
  "createDefaultModalParam7": "On close: statements executed when close button is clicked on modal",
  "executeJavascriptNoReturnName": "Execute javascript",
  "executeJavascriptNoReturnDescription": "Function that execute a javascript",
  "executeJavascriptReturnDescription": "Function that execute a javascript and return the value",
  "executeJavascriptNoReturnParam0": "Command:Command to be executed (example: alert('test');).",
  "newXMLEmptyName": "Create XML",
  "newXMLEmptyDescription": "Function that create a XML document",
  "rootElement": "Root element",
  "newXMLElementName": "Create XML element",
  "newXMLElementDescription": "Function that create a XML element",
  "elementName": "Element name",
  "addXMLElementName": "Add XML element",
  "addXMLElementDescription": "Function that add a XML element inside a parent element",
  "parentElement": "Parent element",
  "elementToAdd": "Element to add",
  "XMLHasRootElementDescription": "Function that verify if exists a XML root element on XML document",
  "XMLGetRootElementName": "Get root element",
  "XMLGetRootElementDescription": "Function that get a root element from a XML document or from a XMl element",
  "XMLDocumentToTextName": "Convert XML to text",
  "XMLDocumentToTextDescription": "Function that convert a XML document or XML element to text",
  "getChildrenName": "Get children element",
  "getChildrenDescription": "Function that return a list with children element",
  "getChildrenParam1": "Value to search:A element or a element name to be search key",
  "setAttributeName": "Set an attribute value",
  "setAttributeDescription": "Function that set an attribute value on attribute",
  "attributeName": "Attribute name",
  "attributeValue": "Attribute value",
  "getAttributeValueName": "Get an attribute value",
  "getAttributeValueDescription": "Function that get an attribute value",
  "getParentNodeName": "Get parent element",
  "getParentNodeDescription": "Function that return a parent element from a XML element",
  "setElementValueName": "Set a content element",
  "setElementValueDescription": "Function that set a content on element",
  "removeElementName": "Remove element",
  "removeElementDescription": "Function that receive a Função que recebe um elemento pai e um elemento ou nome de elemento para remover",
  "getElementNameName": "Get an element name",
  "getElementNameDescription": "Function that get an element name, example < test> return test",
  "renameElementName": "Rename element",
  "renameElementDescription": "Function that rename an element name, example: before: < oldElement/> after:< newElement/>",
  "name": "Name",
  "newXMLEmptyWithRootName": "Create XML",
  "XMLHasRootElementName": "Has Root element?",
  "getElementContentName": "Get element content",
  "getElementContentDescription": "Function that get a content from element. Example < element>content< element> return content",
  "datasource": "Datasource",
  "showComponent": "Show component",
  "showComponentDesc": "Function that shows a component on screen",
  "ComponentParam": "Identifier: Component identifier to be showed on screen",
  "hideComponent": "Hide component",
  "hideComponentDesc": "Function that hide a component on screen",
  "CategoryType.TEXT": "Text",
  "CategoryType.LOGIC": "Logic",
  "searchIds": "Identifier",
  "searchIdsDescription": "Identifier field from screen",
  "enableComponent": "Enable component",
  "enableComponentDesc": "Function that enable a component from screen",
  "focusComponent": "Focus component",
  "focusComponentDesc": "Function that focus a component from screen",
  "disableComponent": "Disable component",
  "disableComponentDesc": "Function that disable a component from screen",
  "CategoryType.OBJECT": "Object",
  "getProperty": "Get Property",
  "getPropertyDescription": "Function to get object property.",
  "object": "Object",
  "property": "Property",
  "setProperty": "Set Value",
  "setPropertyDescription": "Function to assign value to object.",
  "CategoryType.DEVICE": "Mobile Devices",
  "vibrate": "Vibrate",
  "vibrateDescription": "Function to vibrate the mobile device.",
  "getCurrentPosition": "Get geo-referenced position",
  "getCurrentPositionDescription": "Function to obtain geo-referenced position.",
  "success": "Success",
  "error": "Error",
  "watchPosition": "Observe Position",
  "watchPositionDescription": "Function to observe the change in geo-referenced position.",
  "maximumAge": "Maximum Age",
  "timeout": "Time Out",
  "enableHighAccuracy": "Enable High Accuracy",
  "getPicture": "Get Image",
  "getPictureDescription": "Function to get an image of the Camera, Gallery, Album of the device.",
  "destinationType": "Target type",
  "pictureSourceType": "Image Source",
  "allowEdit": "Allow Edition",
  "clearWatch": "Stop Observe",
  "idsFromScreen": "Get Identifier: Identifier (id) to be gotten from a selected form",
  "attrName": "Attribute name: Attribute name on a identifier. Example: src='test' returns src",
  "attrValue": "Attribute value: Attribute value on a identifier. Example: src='test' returns test",
  "getDirectory": "Get Directory",
  "getDirectoryDescription": "Function to get directory on the mobile device.",
  "INTERNAL": "INTERNAL",
  "EXTERNAL": "EXTERNAL",
  "removeFile": "Remove File",
  "fileName": "File Name",
  "removeFileDescription": "Function to remove file on mobile device.",
  "readFile": "Read File",
  "readFileDescription": "Function to read a file on the mobile device.",
  "createFile": "Create File",
  "createFileDescription": "Function to create a file on the mobile device.",
  "dirEntry": "Directory",
  "createDirectory": "Create Directory",
  "dirParent": "Parent Directory",
  "dirChildrenName": "Directory Name",
  "setStorageItem": "Add Storage Item",
  "key": "Key",
  "setStorageItemDescription": "Function to store values in 'Local Storage'.",
  "getStorageItem": "Get Storage Item",
  "getStorageItemDescription": "Function to obtain value stored in 'Local Storage'.",
  "removeStorageItem": "Remove Storage Item",
  "removeStorageItemDescription": "Function to remove the value stored in the key in 'Local Storage'.",
  "watchID": "Observe Id",
  "getConnection": "Network Status",
  "getConnectionDescription": "Function to provides information about the device's cellular and wifi connection",
  "verifyConnection": "Check Network Status",
  "verifyConnectionDescription": "Function to check the status of the device connection.",
  "UnknownConnection": "Unknown connection",
  "EthernetConnection": "Ethernet connection",
  "WiFiConnection": "WiFi connection",
  "Cell2GConnection": "Cell 2G connection",
  "Cell3GConnection": "Cell 3G connection",
  "Cell4GConnection": "Cell 4G connection",
  "CellGenericConnection": "Cell generic connection",
  "NoNetworkConnection": "No network connection",
  "type": "Type",
  "vibrateValue": "Milliseconds: Parameter is Integer or Integer List.",
  "changeAttrValueName": "Change attribute value",
  "changeAttrValueDesc": "Function that change an attribute value from a element",
  "getCurrentAcceleration": "Get Current Acceleration",
  "getCurrentAccelerationDescription": "Function that provides access to device accelerometer.",
  "watchAcceleration": "Observe Acceleration",
  "watchAccelerationDescription": "Function to monitor device acceleration.",
  "clearWatchAcceleration": "Stop Acceleration Watcher",
  "clearWatchAccelerationhDescription": "Function to cancel accelerometer monitoring.",
  "clearWatchPositionDescription": "Function to cancel geo-referenced positioning monitoring.",
  "clearWatchPosition": "Stop Postion Watcher",
  "showModal": "Show modal",
  "showMobileModal": "Show mobile modal",
  "showModalDesc": "Function that shows a modal",
  "showMobileModalDesc": "Function that shows a modal in mobile devices",
  "openDatabase": "Create Database",
  "openDatabaseDescription": "Function to create a database on the mobile device. If no name is given, it will be created with a default name.",
  "executeSql": "Run Command SQL",
  "executeSqlDescription": "Function to execute command SQL.",
  "text": "Text",
  "arrayParams": "List of parameters",
  "downloadFileName": "Start file download on URL",
  "downloadFileDescription": "Starts downloading a file from a url",
  "downloadFileParam0": "URL: Url for download",
  "qrCodeScanner": "Read barcode",
  "formatQRCode": "Format: Format to be searched",
  "messageQRCode": "Message: Message displayed when camera is openned",
  "qrCodeScannerDescription": "Function that read know formats. Example: QR_CODE.",
  "openReport": "Open Report",
  "openReportDescription": "Function responsible for opening a report.",
  "report": "Report",
  "statement": "Statements: Statements to be executed",
  "executeAsynchronousName": "Execute asynchronous",
  "executeAsynchronousDescription": "Function that execute statement asynchronously",
  "scheduleExecutionName": "Schedule execution",
  "scheduleExecutionDescription": "Function that schedule statements to be executed after a delay",
  "scheduleExecutionParam1": "Initial Delay: Initial delay to execute the statements at first time",
  "scheduleExecutionParam2": "Schedule Time: Update time between execute the statements",
  "scheduleExecutionParam3": "Measurement Time: Measurement time used to quantify the others parameters",
  "millisecondss": "Milliseconds",
  "hours": "Hours",
  "minutes": "Minutes",
  "incSecond": "Increment second on date",
  "functionToIncSecond": "Function to increment second in date",
  "secondsToIncrement": "Seconds to increase",
  "incMinute": "Increment minute on date",
  "functionToIncMinute": "Function to increment minute in date",
  "minutesToIncrement": "Minutes to increase",
  "incHour": "Increment hour on date",
  "functionToIncHour": "Function to increment hour in date",
  "hoursToIncrement": "Hours to increase",
  "getHoursBetweenDates": "Get hours total between dates",
  "functionToGetHoursBetweenDates": "Function to get hours total between dates",
  "getMinutesBetweenDates": "Get minutes total between dates",
  "functionToGetMinutesBetweenDates": "Function to get minutes total between dates",
  "getSecondsBetweenDates": "Get seconds total between dates",
  "functionToGetSecondsBetweenDates": "Function to get seconds total between dates",
  "refreshActiveRecordName": "Exists next record?",
  "refreshActiveRecordDescription": "Function that return if exists a next record",
  "refreshActiveRecordParam0": "Datasource",
  "logoutName": "Logout",
  "logoutDescription": "Function that logout an user",
  "hideModal": "Hide modal",
  "hideModalDesc": "Function that hides a modal",
  "hideMobileModal": "Hide mobile modal",
  "hideMobileModalDesc": "Function that hides a modal in mobile devices",
  "createSerieName": "Create serie",
  "createSerieDescription": "Function that create a chart serie",
  "createSerieParamName": "Serie name",
  "createSerieParamData": "Data: Serie data",
  "createSerieParamOptions": "Options: Serie Options",
  "createChartName": "Create chart",
  "createChartDescription": "Function that create a chart",
  "createChartOptions": "Options: Chart options",
  "createChartId": "Id: Chart id (canvas)",
  "createChartType": "Chart type: Chart type to be created",
  "createChartSeries": "Chart serie(s): Set of chart series",
  "createChartLegends": "Legends: Chart legends",
  "CategoryType.CHART": "Chart",
  "isShownIonicModal": "Is shown modal?",
  "isShownIonicModallDesc": "Function that return if a modal are shown",
  "createObject": "Create object",
  "createObjectDescription": "Function that create an object from a text",
  "string": "Text",
  "true": "True",
  "false": "False",
  "refreshDatasource": "Update datasource",
  "refreshDatasourceDescription": "Function that update a datasource, with or without filters",
  "keepFilters": "Keep filter(s)? : If true, keep the filters on datasource update.",
  "typeOf": "Is type of?",
  "typeOfDescription": "Function that verify if a variable is of determined type",
  "number": "Number",
  "undefined": "Undefined",
  "function": "Function",
  "array": "List",
  "returnType": "Return Type",
  "mediaType": "Media Type",
  "setActiveTab": "Change tab",
  "setActiveTablDesc": "Function that set active the selected tab",
  "showLoading": "Show Loading",
  "showLoadingDesc": "Function that show a loading",
  "hideLoading": "Hide Loading",
  "hideLoadingDesc": "Function that hide a loading",
  "getURLFromOthersName": "Get URL content",
  "getURLFromOthersDescription": "Function that do a request into a URL and get the content result",
  "HTTPMethod": "Request method",
  "contentType": "Content type",
  "URLAddress": "Endereço URL: Endereço completo do arquivo. Exemplo: https://www.cronapp.io",
  "paramsHTTP": "Parameters to be passed, if URL_ENCODED, pass a map, if JSON, pass JSON",
  "headers": "Headers: Map who will be added on headers. Example: Token",
  "getHostapp": "Get Back-End Path",
  "getHostappDesc": "Function that return the back-end path. Example: https://myapp.com/",
  "serializeObject": "Serialize Object",
  "serializeObjectDescription": "Function that serialize an object. Example: {cronapp:'100%'} returns \"{\"cronapp\":\"100%\"}\"",
  "setSessionStorage": "Set Session Storage Item",
  "setSessionStorageDesc": "Function that set an item in session storage on browser. This item is clear when browser is closed and are only visible on current tab.",
  "getSessionStorage": "Get Session Storage Item",
  "getSessionStorageDesc": "Function that get an item in session storage on browser. This item is clear when browser is closed and are only visible on current tab.",
  "setLocalStorage": "Set Local Storage Item",
  "setLocalStorageDesc": "Function that set an item in session storage on browser (global). This Item is keeped when the browser are closed and are visible to all tabs",
  "getLocalStorage": "Get Local Storage Item",
  "getLocalStorageDesc": "Function that get an item in session storage on browser (global). This Item is keeped when the browser are closed and are visible to all tabs",
  "deleteProperty": "Delete property",
  "deletePropertyDescription": "Function that delete a property from object/json.",
  "getDeviceInfo": "Get Device Info",
  "getDeviceInfoDescription": "Function that get a device info, i.e  uuid, platform",
  "getFirebaseToken": "Get Firebase Token",
  "getFirebaseTokenDescription": "Function that return a firease token for send push notifications",
  "dbName": "Database Name",
  "getUserToken":"Get user logged Token",
  "getUserTokenDesc":"Function that get an user logged token (X-AUTH-TOKEN)",
  "getFirebaseNotificationData":"Get Push Notification Data",
  "getFirebaseNotificationDataDesc":"Function that get push notification data",
  "changeContent":"Change content",
  "changeContentDesc":"Function that change the content, i.e: label",
  "firstRecordName": "Go to First Record",
  "firstRecordDescription": "Function that points to the first datasource cursor",
  "firstRecordParam0": "Datasource",
  "lastRecordName": "Go to Last Record",
  "lastRecordDescription": "Function that points to the last datasource cursor",
  "lastRecordParam0": "Datasource",
  "createNewObject": "Create new object",
  "functionToCreateNewObject": "Function to create new object",
  "getObjectField": "Get field of",
  "functionToGetObjectField": "Function to get object field",
  "obj": "Object",
  "createObjectJson": "Create Json object",
  "createObjectJsonDescription": "Function to create Json object",
  "json": "Json",
  "CategoryType.JSON": "Json",
  "CategoryType.SOCIAL": "Social",
  "sociaLoginDescription":"Function that login with selected social network",
  "socialNetwork":"Social Network",
  "socialLogin":"Login",
  "getSelectedRowsGrid": "Get Selected Rows from Grid",
  "functionToGetSelectedRowsGrid": "Function to get selected rows from a grid",
  "loadMoreName":"Load more itens",
  "loadMoreNameDescription":"Function that invokes the next page from the selected datasource",
  "hasNextPageName":"Has next page?",
  "hasNextPageDescription":"Function that returns if exists a next page on selected datasource",
  "compile": "Compile?"
}